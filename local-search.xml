<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DASCTF Sept X 浙江工业大学秋季挑战赛</title>
    <link href="/2021/09/25/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2021/09/25/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br>flag=<span class="hljs-string">b&#x27;flag&#123;******************&#125;&#x27;</span><br>n = <span class="hljs-number">2</span> ** <span class="hljs-number">256</span><br><span class="hljs-comment"># n = 115792089237316195423570985008687907853269984665640564039457584007913129639936</span><br><span class="hljs-built_in">print</span>(n)<br>flaglong=bytes_to_long(flag)<br>m = random.randint(<span class="hljs-number">2</span>, n-<span class="hljs-number">1</span>) | <span class="hljs-number">1</span><br>c = <span class="hljs-built_in">pow</span>(m, flaglong, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m = &#x27;</span> + <span class="hljs-built_in">str</span>(m))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c = &#x27;</span> + <span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-comment"># m = 73964803637492582853353338913523546944627084372081477892312545091623069227301</span><br><span class="hljs-comment"># c = 21572244511100216966799370397791432119463715616349800194229377843045443048821</span><br></code></pre></td></tr></table></figure><p>题目意思很简单，就是求满足 m^bytes_to_long(flag)^ %n=c 的flag值。</p><h4 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h4><p><strong>离散对数问题</strong>：离散对数（英语：Discrete logarithm）是一种基于同余运算和原根的一种对数运算。而在实数中对数的定义 logba是指对于给定的a和b，有一个数x，使得bx=a。相同地在任何群G中可为所有整数k定义一个幂数为bK，而离散对数logba是指使得bK=a的整数k</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory <span class="hljs-keyword">import</span> discrete_log<br><span class="hljs-keyword">import</span> binascii<br><br>n = <span class="hljs-number">2</span> ** <span class="hljs-number">256</span><br>m = <span class="hljs-number">73964803637492582853353338913523546944627084372081477892312545091623069227301</span><br>c = <span class="hljs-number">21572244511100216966799370397791432119463715616349800194229377843045443048821</span><br>flag = discrete_log(n, c, m)  <span class="hljs-comment"># 求解以c为底，n的对数；m为c的阶</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag))<br><span class="hljs-comment"># 0x666c61677b4441534354465f7a6a75747d</span><br>flag = <span class="hljs-string">&quot;666c61677b4441534354465f7a6a75747d&quot;</span><br>flag = binascii.unhexlify(flag)  <span class="hljs-comment"># 16进制转字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(flag, <span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># bytes转字符串</span><br></code></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Girlfriend’s-account"><a href="#Girlfriend’s-account" class="headerlink" title="Girlfriend’s account"></a>Girlfriend’s account</h3><p>题目说明：jackie的女朋友又偷偷用他的信用卡买东西了，你能算算一共花了多少钱吗？</p><p>————考excel函数的与ctf毫无关系的sb题目</p><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210925235455790.png" alt="xlsx内容"></p><p>金额转小写<code>=SUM(ISNUMBER(SEARCH(TEXT(&#123;1,2,3,4,5,6,7,8,9&#125;,&quot;[dbnum2]&quot;&amp;&#123;&quot;0亿&quot;;&quot;0仟!*万&quot;;&quot;0佰!*万&quot;;&quot;0拾!*万&quot;;&quot;0万&quot;;&quot;万!*0仟&quot;;&quot;万!*0佰&quot;;&quot;万!*0拾&quot;;&quot;0元&quot;;&quot;0角&quot;;&quot;0分&quot;&#125;),IF(ISERR(FIND(&quot;万&quot;,E2)),&quot;万&quot;,)&amp;E2))*&#123;1,2,3,4,5,6,7,8,9&#125;*10^&#123;8;7;6;5;4;3;2;1;0;-1;-2&#125;)</code></p><p>件数转小写<code>=MATCH(G2,TEXT(ROW($1:$5000),&quot;[dbnum2]&quot;),0)</code>或<code>=IF(B3=”壹”,1,IF(B3=”贰”,2,IF(B3=”叁”,3,IF(B3=”肆”,4,IF(B3=”伍”,5,IF(B3=”陆”,6,IF(B3=”柒”,7,IF(B3=”捌”,8,IF(B3=”玖”,9)))))))))</code>或<code>=MATCH(G2,TEXT(ROW($1:$100),&quot;[dbnum2]&quot;),0)</code>？</p><p>总价<code>=F2*H2</code></p><p><code>Ctrl+shift+enter</code>计算结果，下拉5000行填充即可（应该有简便方法。。。）</p><p>求和<code>=SUM(I2:I5001)</code></p><p>得到<strong>flag</strong>：flag{12305926.36}</p><h3 id="双目失明，身残志坚"><a href="#双目失明，身残志坚" class="headerlink" title="双目失明，身残志坚"></a>双目失明，身残志坚</h3><p>附件为无后缀zip文件，拖入winhex查看文件头不大对劲，尝试拖入foremost分离出压缩包，解压得到两个图片，分别是blind.png和original.png，两图片内容已知，其中blind.png文件更大，结合题目名和图片名猜想为盲水印</p><h4 id="相关知识点-1"><a href="#相关知识点-1" class="headerlink" title="相关知识点"></a>相关知识点</h4><h5 id="数字水印"><a href="#数字水印" class="headerlink" title="数字水印"></a>数字水印</h5><p>数字水印（digital watermark）技术，是指在数字化的数据内容中嵌入不明显的记号。<br>特征是，被嵌入的记号通常是不可见或不可察的，但是可以通过计算操作检测或者提取。</p><h5 id="盲水印与傅里叶变换"><a href="#盲水印与傅里叶变换" class="headerlink" title="盲水印与傅里叶变换"></a>盲水印与傅里叶变换</h5><p>这里介绍的盲水印是以知乎某答主的频域添加盲水印的文章为基础，在2016HCTF的也出了一个隐写题目，也是以频域为背景的。</p><p>盲水印，是指人感知不到的水印，包括看不到或听不见（没错，数字盲水印也能够用于音频）。其主要应用于音像作品、数字图书等，目的是在不破坏原始作品的情况下，实现版权的防护与追踪。</p><p>对图像进行傅里叶变换，起始是一个二维离散傅里叶变换，图像的频率是指图像灰度变换的强烈程度，将二维图像由空间域变为频域后，图像上的每个点的值都变成了复数，也就是所谓的复频域，通过复数的实部和虚部，可以计算出幅值和相位，计算幅值即对复数取模值，将取模值后的矩阵显示出来，即为其频谱图。但是问题来了，复数取模后，数字有可能变的很大，远大于255，如果数据超过255，则在显示图像的时候会都当做255来处理，图像就成了全白色。因此，一般会对模值再取对数，在在0~255的范围内进行归一化，这样才能够准确的反映到图像上，发现数据之间的差别，区分高频和低频分量，这也是进行傅里叶变换的意义。</p><h5 id="盲水印提取项目：BlindWaterMark"><a href="#盲水印提取项目：BlindWaterMark" class="headerlink" title="盲水印提取项目：BlindWaterMark"></a>盲水印提取项目：<a href="https://github.com/chishaxie/BlindWaterMark">BlindWaterMark<a/></h5><p><strong>环境配置</strong></p><p>python2.3皆可，且加解密结果不同(python2和python3 random的算法不同)</p><p class="note note-danger">若同时存在python2、python3，注意环境变量、pip、依赖库冲突</p><p><strong>依赖库安装</strong></p><p><code>pip install -r requirements.txt</code>    经尝试不可行</p><p>需安装opencv-python、matplotlib（涉及numpy、pillow）</p><p><strong>命令提取盲水印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">python bwm.py encode original.png flag.png blind.png  # 合成盲水印<br>python2 bwm.py decode original.png blind.png flag.png<br>python bwmforpy3.py decode original.png blind.png flag.png --oldseed  # 效果等同python2<br>python bwmforpy3.py decode original.png blind.png flag.png<br></code></pre></td></tr></table></figure><p>有软件WaterMake可实现盲水印</p><h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><p>将图片依次拷贝至<code>python2(3)\Lib\site-packages\BlindWaterMark-master</code>目录下尝试，分别执行命令<code>python2 bwm.py decode original.png blind.png decode1.png</code>，<code>python bwmforpy3.py decode original.png blind.png decode1.png</code></p><p>python3成功提取到png</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/decode1.png" alt="decode1.png"></p><p>考虑摩斯密码因无法分段放弃，猜测为盲文</p><p>——望国家加大对残障人士的关注。。。。百度到的盲文对照表乱的一塌糊涂</p><p>下载app文星盲文学习助手，依次对照声母韵母，注意以下<strong>特殊对照</strong></p><p class="note note-danger">点位（1234）、（13）、（125）与i、ü开头的韵母相拼时读作j、q、x；与其他韵母相拼时读作g、k、h</p><p class="note note-danger">点位（256）自成音节时读ueng，与韵母相拼时读作ong</p><p class="note note-danger">点位（26）有o、e两读音</p><p>对照结果为<code>zhejianggongiedaxüe</code>，修正为<code>zhejianggongyedaxue</code></p><p>提交<strong>flag</strong>：flag{zhejianggongyedaxue}</p><p>——很遗憾结束后半小时才出</p><p>​    </p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><h2 id="CRYPTO-1"><a href="#CRYPTO-1" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="签到-1"><a href="#签到-1" class="headerlink" title="签到"></a>签到</h3><p><strong>[网鼎杯 2020 青龙组]you_raise_me_up原题</strong></p><h2 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Girlfriend’s-account-1"><a href="#Girlfriend’s-account-1" class="headerlink" title="Girlfriend’s account"></a>Girlfriend’s account</h3><p>python脚本读取xls文件，字典替换中文数字，相乘并加和</p><h3 id="双目失明，身残志坚-1"><a href="#双目失明，身残志坚-1" class="headerlink" title="双目失明，身残志坚"></a>双目失明，身残志坚</h3><h4 id="盲文介绍"><a href="#盲文介绍" class="headerlink" title="盲文介绍"></a>盲文介绍</h4><p>​    盲文又称点字，国际通用的点字由6个凸起的圆点为基本结构组成，是专供盲人摸读、书写的文字符号。1829年，法国盲人路易•布莱尔（Louls  Braille，1809-1852）受夜文的启发，创造出了以简单的凸点代替拉丁字母的盲文体系，国际上用他的名字来命名盲文（Braille）。</p><p>　　布莱尔创造的由6个点为基础结构的盲字，在纸面上有的凸起，有的不凸起，形成64种变化，即64种符形，在每个符号（单位称“方”）左右两列，每列各三个点，从左边自上而下叫做1、2、3点，从右边自上而下叫做4、5、6点。</p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/1294588-20171209020302687-1309425931.png" alt="数字"  /><p>解读：每个数字的盲文前面都有个“3456”点符形，是数号，表示后面的读作阿拉伯数字。</p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/1294588-20171209020410718-2097173928.png" alt="字母" style="zoom:100%;" /><p>解读：英语盲文a－j都只是用了1245点位即上半截，和数字的一样；k－t是a－j下面加上了3号点位。</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/1294588-20171209020502062-1711770707.png" alt="声母" style="zoom: 70%;" />    <img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/1294588-20171209020525296-1396884603.png" alt="声母续" style="zoom: 70%;" /></p><p>注意：声母g/k/h在韵母i/u/ü时变读为j/q/x。z/c/s/zh/ch/sh/r后面的i省略</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/1294588-20171209020551656-732721789.png" alt="韵母"  />    <img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/1294588-20171209020600062-2104059061.png" alt="声调"  /></p><h3 id="ZipBomb"><a href="#ZipBomb" class="headerlink" title="ZipBomb"></a>ZipBomb</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os.path<br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> re<br><br>dir_path = <span class="hljs-string">&#x27;zipBomb&#x27;</span><br>files = os.listdir(dir_path)  <span class="hljs-comment"># 返回指定的文件夹包含的文件或文件夹的名字的列表</span><br><span class="hljs-built_in">print</span>(files)<br>setee = []<br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:  <span class="hljs-comment"># 遍历文件夹</span><br>    position = dir_path + <span class="hljs-string">&#x27;\\&#x27;</span> + file  <span class="hljs-comment"># 构造绝对路径，&quot;\\&quot;，其中一个&#x27;\&#x27;为转义符</span><br>    <span class="hljs-built_in">print</span>(position)<br>    z = zipfile.ZipFile(position, <span class="hljs-string">&#x27;r&#x27;</span>)  <span class="hljs-comment"># 创建(w)或读取(r)zip文件</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> z.namelist():  <span class="hljs-comment"># 返回压缩包内所有文件名的列表</span><br>        <span class="hljs-built_in">bytes</span> = z.read(filename)  <span class="hljs-comment"># 从压缩包里解压缩出一个文件</span><br>        <span class="hljs-comment"># 以二进制方式打开读每一个文件 flag的16进制值为666C6167</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>:  <span class="hljs-comment"># wp给出的脚本为Zmxh，跑不出来</span><br>            <span class="hljs-built_in">print</span>(filename)<br></code></pre></td></tr></table></figure><p>找到zipBomb\OJ.ZIP中名为FLAG的文件含错误flag:flag{F4KE_flag!}</p><p class="note note-danger">猜测扫描每个文件内容识别flag的十六进制值找到正确flag</p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="ea5ycpp"><a href="#ea5ycpp" class="headerlink" title="ea5ycpp"></a>ea5ycpp</h3><p>程序逻辑不懂，大概是在执行brainfuck代码吧？</p><p>brainfuck代码详解：<a href="https://baike.baidu.com/item/Brainfuck/1152785?fr=aladdin">百度百科<a/></p><p>赋值部分汇编代码（避免大小端模式影响）</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211012183623736.png" alt="image-20211012183623736"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例text24 = &#x27;&gt;+++++++++++++++++++++++++[&lt;+&gt;-]&#x27;</span><br><span class="hljs-comment"># text24：在【1】中放入25，把它移动到【0】中即相加，并将【1】置零</span><br>v14 = [<span class="hljs-number">0x68</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x96</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>j = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>):<br>    flag += <span class="hljs-built_in">chr</span>(v14[i]-j)  <span class="hljs-comment"># (v14[i] - (2+i))</span><br>    j += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># flag&#123;br41n_f**k_i5_go0d&#125;</span><br></code></pre></td></tr></table></figure><h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>根据字符串找到main函数</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211012221919445.png" alt="main函数"></p><p><strong>由于小端模式，v7的值实为’aSci!}’</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>v23 = <span class="hljs-string">&#x27;flagU&#x27;</span>  <span class="hljs-comment"># 应经过类似处理未发现</span><br>v22 = Int(<span class="hljs-string">&#x27;v22&#x27;</span>)<br>v24 = Int(<span class="hljs-string">&#x27;v24&#x27;</span>)<br>v25 = Int(<span class="hljs-string">&#x27;v25&#x27;</span>)<br>v26 = Int(<span class="hljs-string">&#x27;v26&#x27;</span>)<br><span class="hljs-comment"># 解方程</span><br>s = Solver()<br>s.add(v26 - v22 == <span class="hljs-number">0x61536369217D</span>)<br>s.add(v25 - v22 == <span class="hljs-number">0x586531316F</span>)<br>s.add(v24 - v22 == <span class="hljs-number">0x5F3631626F4E</span>)<br>s.add(v22 + v24 + v25 + v26 == <span class="hljs-number">0xC121F9FCC23A</span>)<br><span class="hljs-keyword">if</span> s.check() == sat:<br>    answer = s.model()<br><span class="hljs-comment"># print(answer)</span><br><span class="hljs-comment"># 将结果转为16进制后转换为字符输出</span><br>v22 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(answer[v22].as_long()))<br>v24 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(answer[v24].as_long()))<br>v25 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(answer[v25].as_long()))<br>v26 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(answer[v26].as_long()))<br><span class="hljs-built_in">print</span>(v22)<br><span class="hljs-built_in">print</span>(v24)<br><span class="hljs-built_in">print</span>(v25)<br><span class="hljs-built_in">print</span>(v26)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>flag += <span class="hljs-string">&#x27;000000&#x27;</span>  <span class="hljs-comment"># 补全8位分段（可有可无）</span><br>flag += v22[<span class="hljs-number">2</span>::]<br>flag += <span class="hljs-string">&#x27;0000&#x27;</span><br>flag += v24[<span class="hljs-number">2</span>::]<br>flag += <span class="hljs-string">&#x27;000000&#x27;</span><br>flag += v25[<span class="hljs-number">2</span>::]<br>flag += <span class="hljs-string">&#x27;0000&#x27;</span><br>flag += v26[<span class="hljs-number">2</span>::]<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(flag))<br>flag1 = [<span class="hljs-number">0</span>] * <span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">2</span>):<br>    flag1[i] = flag[i:i + <span class="hljs-number">2</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(flag1[i], <span class="hljs-number">16</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># _F1boN   he11o  acci!&#125;</span><br></code></pre></td></tr></table></figure><p class="note note-danger">奇奇怪怪的碰运气出flag。。。。。一堆函数不知道干啥的。。。。</p><h3 id="pig-brain-king"><a href="#pig-brain-king" class="headerlink" title="pig_brain_king"></a>pig_brain_king</h3><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211016134536616.png" alt="运行exe"></p><p>题目运行需要msvcp140d.dll（放到同目录下或C:\Windows\SysWOW64中即可），题中所有文字提示的输出都是通过从字典中取值并逐一输出的</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211016132608716.png" alt="字典"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">d = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;?!_&#x27;</span><br><span class="hljs-built_in">print</span>(d[<span class="hljs-number">22</span>]+d[<span class="hljs-number">33</span>]+d[<span class="hljs-number">40</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">44</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">33</span>]+d[<span class="hljs-number">30</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">43</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">32</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">45</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">41</span>]+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">32</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">27</span>]+d[<span class="hljs-number">43</span>]+d[<span class="hljs-number">26</span>]+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">39</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">36</span>]+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">32</span>]+d[<span class="hljs-number">66</span>]+d[<span class="hljs-number">67</span>])<br><span class="hljs-built_in">print</span>(d[<span class="hljs-number">2</span>]+d[<span class="hljs-number">26</span>]+d[<span class="hljs-number">39</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">50</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">46</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">26</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">48</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">43</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">53</span>]+d[<span class="hljs-number">52</span>]+d[<span class="hljs-number">52</span>]+d[<span class="hljs-number">52</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">42</span>]+d[<span class="hljs-number">46</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">44</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">28</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">43</span>]+d[<span class="hljs-number">43</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">28</span>]+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">37</span>]+d[<span class="hljs-number">50</span>]+d[<span class="hljs-number">66</span>])<br><span class="hljs-built_in">print</span>(d[<span class="hljs-number">13</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">48</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">26</span>]+d[<span class="hljs-number">43</span>]+d[<span class="hljs-number">45</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">29</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">32</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">33</span>]+d[<span class="hljs-number">30</span>]+<span class="hljs-string">&#x27; &#x27;</span>+   d[<span class="hljs-number">42</span>]+d[<span class="hljs-number">46</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">67</span>])<br><span class="hljs-built_in">print</span>(d[<span class="hljs-number">15</span>]+d[<span class="hljs-number">37</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">26</span>]+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">30</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">45</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">43</span>])<br><span class="hljs-built_in">print</span>(d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">40</span>])<br><span class="hljs-built_in">print</span>(d[<span class="hljs-number">27</span>]+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">32</span>]+d[<span class="hljs-number">40</span>]+d[<span class="hljs-number">67</span>])<br><span class="hljs-built_in">print</span>(d[<span class="hljs-number">19</span>]+d[<span class="hljs-number">33</span>]+d[<span class="hljs-number">30</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">26</span>]+d[<span class="hljs-number">39</span>]+d[<span class="hljs-number">44</span>]+d[<span class="hljs-number">48</span>]+d[<span class="hljs-number">30</span>]+d[<span class="hljs-number">43</span>]+<span class="hljs-string">&#x27; &#x27;</span>+d[<span class="hljs-number">34</span>]+d[<span class="hljs-number">44</span>])<br><span class="hljs-comment"># 即</span><br><span class="hljs-comment"># Who is the strongest pig brain king?!</span><br><span class="hljs-comment"># Can you answer 1000 questions correctly?</span><br><span class="hljs-comment"># Now start doing the questions!</span><br><span class="hljs-comment"># Please enter</span><br><span class="hljs-comment"># nonono</span><br><span class="hljs-comment"># bingo!</span><br><span class="hljs-comment"># The answer is</span><br></code></pre></td></tr></table></figure><p><strong>法一：</strong>在判断正误的语句中有错误跳转，将其nop掉或改成jnz即可</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211016133355597.png" alt="回答问题正误"></p><p>sub_4114BF输出answer即flag，大体思路是依次正确回答1000个问题（即输入屏幕短暂显示的字符串）后显示flag并清屏</p><p class="note note-danger">第1001次判断未发现，flag的计算思路不明</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211016133510233.png" alt="flag输出"></p><p>依次改掉休眠（将push改为0即可），错误跳转，输入1000个任意字符，即显示flag</p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211016134009887.png" alt="sleep函数修改"></p><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211016160644212.png" alt="jz改为jnz"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成1000行任意字符</span><br>file_handle = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;writein.txt&#x27;</span>, mode=<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1001</span>):<br>    file_handle.write(<span class="hljs-string">&#x27;a\n&#x27;</span>)<br>file_handle.close()<br></code></pre></td></tr></table></figure><p><img src="/img/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211016160834810.png" alt="第1001次显示flag"></p><p><strong>法二：</strong>利用pwntools自动化解<code>nc -l -p 8081  -e ./re-pig_brain_king.exe</code>,无需修改错误跳转，直接获取屏幕输出并输入</p><p class="note note-danger">pwntools工具未使用过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># exp</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>r = remote(<span class="hljs-string">&#x27;172.17.208.1&#x27;</span>,<span class="hljs-number">8081</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1001</span>):<br>    r.recvuntil(<span class="hljs-string">&quot;Now start doing the questions!\r\n&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    ans=r.recvline()[:-<span class="hljs-number">2</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ans:&quot;</span>,ans)<br>    r.sendlineafter(<span class="hljs-string">&quot;Please enter:&quot;</span>, ans)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong>flag：</strong>flag{YOU_ar3_The_k1ng_Of_pig_bra1n!}</p>]]></content>
    
    
    <categories>
      
      <category>Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DASCTF</tag>
      
      <tag>crypto</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDApro 权威指南</title>
    <link href="/2021/08/31/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    <url>/2021/08/31/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Part-1-IDA简介"><a href="#Part-1-IDA简介" class="headerlink" title="Part 1    IDA简介"></a>Part 1    IDA简介</h1><h2 id="第1章-反汇编简介"><a href="#第1章-反汇编简介" class="headerlink" title="第1章 反汇编简介"></a>第1章 反汇编简介</h2><h3 id="一、编程语言"><a href="#一、编程语言" class="headerlink" title="一、编程语言"></a>一、编程语言</h3><ol><li> 机器语言/字节码——二进制文件</li><li> 汇编语言</li><li> C/Java——通过编译器转换为汇编等</li><li> 本书不讨论</li></ol><h3 id="二、反汇编"><a href="#二、反汇编" class="headerlink" title="二、反汇编"></a>二、反汇编</h3><ol><li><p> 难点：编译损失，多对多操作，依赖语言和库</p></li><li><p> 需求：分析恶意软件，闭源软件漏洞和互操作性（多平台支持），优化或验证编译器，显示调试信息</p></li><li><p> x86汇编语法：</p></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># AT&amp;T语法——GNU(gcc,gdb)</span><br><span class="hljs-keyword">add</span><span class="bash"> <span class="hljs-variable">$0x4</span>,%eax<span class="hljs-comment"># 左：源操作数，右：目的操作数，%寄存器，$文字常量（立即操作数）</span></span><br><span class="hljs-keyword">add</span><span class="bash"> eax,0x4<span class="hljs-comment"># Intel语法——MASM</span></span><br></code></pre></td></tr></table></figure><h4 id="4-反汇编算法"><a href="#4-反汇编算法" class="headerlink" title="4. 反汇编算法"></a>4. 反汇编算法</h4><p><strong>（1）线性扫描反汇编</strong>——gdb,WinDbg,objdump</p><p>从一个代码段第一个字节开始逐条反汇编</p><ul><li>优点：完全覆盖所有代码段</li><li>缺点：无法区分嵌入的数据与代码区</li><li>适合由长度固定的指令构成的指令集（如MIPS）</li></ul><p><strong>（2）递归下降反汇编</strong></p><p>① 顺序流指令：线性扫描</p><p>② 条件分支指令(如jnz)：条件为假——线性，为真——搁置</p><p>③ 无条件分支指令(如jmp)：静态无法确定如jmp eax类目标</p><p>④ 函数调用指令：紧跟调用后的线性，目标地址——推迟</p><p>⑤ 返回指令(如ret)：处理搁置地址</p><ul><li><p>优点：可区分代码与数据</p></li><li><p>缺点：无法处理目标地址的跳转或调用（可通过指针处理）</p></li></ul><h2 id="第2章-逆向与反汇编工具"><a href="#第2章-逆向与反汇编工具" class="headerlink" title="第2章 逆向与反汇编工具"></a>第2章 逆向与反汇编工具</h2><h3 id="一、Windows系统"><a href="#一、Windows系统" class="headerlink" title="一、Windows系统"></a>一、Windows系统</h3><h4 id="1-Cygwin环境环境"><a href="#1-Cygwin环境环境" class="headerlink" title="1. Cygwin环境环境"></a>1. Cygwin环境环境</h4><p>提供Linux风格的shell和相关程序，包括编译器（gcc、g++），解释器（Perl、Python、Ruby），网络实用工具（nc、ssh）,下文的obdump等</p><h4 id="2-PE-Tools"><a href="#2-PE-Tools" class="headerlink" title="2. PE Tools"></a>2. PE Tools</h4><p>分析活动进程，何种编译器构建，模糊处理工具，PE文件头</p><h4 id="3-PEID"><a href="#3-PEID" class="headerlink" title="3. PEID"></a>3. PEID</h4><p>识别编译器和模糊工具</p><h4 id="4-dumpbin"><a href="#4-dumpbin" class="headerlink" title="4. dumpbin"></a>4. dumpbin</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dumpbin <span class="hljs-string">/dependents</span> example.exe<br></code></pre></td></tr></table></figure><p>VS套件中命令行工具，显示Win程序的动态依赖关系（如.dll等）</p><h3 id="二、Linux系统"><a href="#二、Linux系统" class="headerlink" title="二、Linux系统"></a>二、Linux系统</h3><h4 id="1-file命令"><a href="#1-file命令" class="headerlink" title="1. file命令"></a>1. file命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">file 文件名<br></code></pre></td></tr></table></figure><p>通过幻数（特殊标签值）确定文件类型，识别链接方式及是否去除符号等信息</p><p><strong>幻数：</strong></p><ul><li>java的.class文件    0xcafebabe</li><li>MS-DOS    MZ</li></ul><p><strong>去除二进制可执行文件的符号：</strong></p><ul><li>编译过程会留下符号用于链接过程中解析文件之间的引用关系，完成后可删除（strip工具/构建时传给链接器的选项）</li></ul><h4 id="2-nm命令"><a href="#2-nm命令" class="headerlink" title="2. nm命令"></a>2. nm命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">gcc -c example.c<br>nm example.o<br></code></pre></td></tr></table></figure><p>检查中间目标文件（.o文件），输出文件中声明的任何函数和全局变量的名称。</p><h4 id="3-ldd命令"><a href="#3-ldd命令" class="headerlink" title="3. ldd命令"></a>3. ldd命令</h4><p><strong>静态链接：</strong>将目标文件和所需文件结合</p><ul><li>优点：函数调用快，发布容易</li><li>缺点：文件大，库改变——重新连接——升级困难，逆向工程分析复杂</li></ul><p><strong>动态链接：</strong>将所需库的引用插入可执行文件</p><ul><li>优点：文件小，升级容易</li><li>缺点：加载慢，发布繁琐</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">gcc -o example_dynamic example.<span class="hljs-keyword">c</span><br>gcc -o example_static example.<span class="hljs-keyword">c</span> --static<br>ldd 文件位置<br></code></pre></td></tr></table></figure><p>ldd确定依赖的动态库，以下方法可实现类似功能</p><ul><li>OS X系统上<code>otool -L 文件名</code></li><li>Win系统VS套件中<code>dumpbin /dependents 文件名</code></li></ul><h4 id="4-objdump命令"><a href="#4-objdump命令" class="headerlink" title="4. objdump命令"></a>4. objdump命令</h4><p>可显示节头部，专用头部（包括ldd等工具生成的），调试信息，符号信息（类似nm），反汇编死代码清单（难以有效导航和修改），依靠libbfd，可解析ELF、PE等</p><ul><li><strong>readelf</strong>也可用于解析ELF文件，不依赖libbfd</li></ul><h4 id="5-otool命令"><a href="#5-otool命令" class="headerlink" title="5. otool命令"></a>5. otool命令</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">file</span> 文件名<br>otool -L 文件名<br></code></pre></td></tr></table></figure><p>解析与OS X Math-O二进制文件有关的信息（类似objdump的功能）</p><p class="note note-primary">暂未接触过该类二进制文件</p><h4 id="6-c-filt"><a href="#6-c-filt" class="headerlink" title="6. c++filt"></a>6. c++filt</h4><p>重载函数需名称改编以区分不同重载版本，编译器设计人员自行制定标准</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">g++ -o <span class="hljs-built_in">example</span> <span class="hljs-built_in">example</span>.cpp<br><span class="hljs-built_in">nm</span> <span class="hljs-built_in">example</span> | grep <span class="hljs-built_in">demo</span># 显示<span class="hljs-built_in">demo</span>的重载版本<br><span class="hljs-built_in">nm</span> <span class="hljs-built_in">example</span> | grep <span class="hljs-built_in">demo</span> | c++filt# 得到原始名称<br></code></pre></td></tr></table></figure><p>c++filt设法确定用于生成该名称的编译器并输出原始名称，无法识别时原样输出</p><ul><li><font color='red'>改编名称包含的额外信息可能含有与类名称或函数调用约定有关的信息</font></li></ul><h4 id="7-strings"><a href="#7-strings" class="headerlink" title="7. strings"></a>7. strings</h4><p>字符串指至少包含4个连续可打印ASCII字符，搜索不受文件结构限制，包含函数名、库名称、程序输出等</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">string</span>s 文件名<br></code></pre></td></tr></table></figure><p>strings工具用于提取文件中的字符串内容（默认至少包含4个字符的7位ASCII序列）</p><ul><li>strings仅扫描可加载的，经初始化的部分，<code>strings -a example</code>强制扫描整个文件</li><li><code>strings -t example</code>显示偏移量信息（即在文件中的位置）</li><li><code>strings -e example</code>可搜索16位Unicode字符</li></ul><h3 id="三、流式反汇编器"><a href="#三、流式反汇编器" class="headerlink" title="三、流式反汇编器"></a>三、流式反汇编器</h3><p>ndisasm和diStorm用于x86指令集的流式反汇编器，可用于分析网络数据包中可能包含的shellcode攻击和不包含布局参考的ROM镜像（部分数据、部分代码）</p><h2 id="第3章-IDA-Pro-背景知识"><a href="#第3章-IDA-Pro-背景知识" class="headerlink" title="第3章 IDA Pro 背景知识"></a>第3章 IDA Pro 背景知识</h2><ul><li>递归下降反汇编器</li><li>MS-DOS应用程序</li><li>可在Windows的GUI，Linux和OS X的控制台界面中使用</li></ul><h3 id="一、反盗版策略"><a href="#一、反盗版策略" class="headerlink" title="一、反盗版策略"></a>一、反盗版策略</h3><ol><li>带有与购买者一对一的水印</li><li>实施许可策略：某IDA启动后在23945端口广播UDP包，比较同子网得到的相应数量与许可用户数量</li><li>下发唯一ida.key文件</li></ol><ul><li>该许可证赋予用户对IDA进行逆向工程的权利</li></ul><h3 id="二、-IDA版本"><a href="#二、-IDA版本" class="headerlink" title="二、 IDA版本"></a>二、 IDA版本</h3><ul><li>IDAPython需注意匹配的Pyhton版本</li><li>分别支持32位和64位代码的反汇编，但<strong>IDA本身为32位</strong>，插件需安装32位的</li></ul><h3 id="三、-IDA目录结构"><a href="#三、-IDA目录结构" class="headerlink" title="三、 IDA目录结构"></a>三、 IDA目录结构</h3><ol><li>cfg：包含IDA和GUI配置文件</li><li>idc：包含内置脚本语言IDC的核心文件</li><li>ids：用于描述摘要信息，某函数参数类型，调用约定等信息</li><li>loaders：包含在文件加载过程中用于识别和解析已知文件格式的扩展</li><li>plugins：提供附加功能的插件</li><li>procs：处理器模块（机器语言——汇编语言）</li><li>sig：包含现有代码签名，通过模式匹配节省分析时间</li><li>til：记录各种编译器库的数据结构和布局</li></ol><h1 id="Part-2-IDA基本用法"><a href="#Part-2-IDA基本用法" class="headerlink" title="Part 2    IDA基本用法"></a>Part 2    IDA基本用法</h1><h2 id="第4章-IDA入门"><a href="#第4章-IDA入门" class="headerlink" title="第4章 IDA入门"></a>第4章 IDA入门</h2><h3 id="一、启动IDA"><a href="#一、启动IDA" class="headerlink" title="一、启动IDA"></a>一、启动IDA</h3><ul><li>欢迎信息不展示取消选中底部Kisplay at startup即可，编辑注册表项HKEY_CURRENT_USER\Sofrware\Hex-Rays\IDA中DisplayWelcome值为1可复原，或选择Windows→Reset hidden message显示所有隐藏信息</li><li>Previous（上一个）。最近文件包含IDA的Windows注册表项的History子项的值（默认为10），可编辑idagui.cfg或idatui.cfg更改</li></ul><h4 id="1-文件加载"><a href="#1-文件加载" class="headerlink" title="1. 文件加载"></a>1. 文件加载</h4><ul><li>可使用Edit→Segments→Rebase Program命令来修改IDA景象的基址</li><li>二进制文件需在Loading Segment和loading Offset字段中指定基址信息创建RAM块，ROM块</li></ul><h3 id="二、IDA数据文件"><a href="#二、IDA数据文件" class="headerlink" title="二、IDA数据文件"></a>二、IDA数据文件</h3><ol><li>IDA将可执行文件加载到内存中分析时，会创建一个数据库（IDB文件），有以下四个组件：</li></ol><p>(1) .id0：二叉树形式的数据库</p><p>(2) .id1：描述每个程序字节的标记</p><p>(3) .nam：Names窗口显示的给定程序位置有关的索引信息</p><p>(4) .til：存储给定数据库的本地类型定义信息</p><ol start="2"><li>加载器警告</li></ol><p>(1) 加载PE文件时发现程序数据库（PDB）文件，询问是否定位并处理</p><p>(2) 遇到模糊程序时，若导入表没有根据约定进行格式化，提示该文件可能被压缩或经过修改，如果希望看到原始导入文件需取消选择make imports section并重新加载</p><ol start="3"><li><p>IDA本质是数据库应用程序，以有利于逆向工程的格式显示各种数据库视图，修改并不访问或影响可执行文件本身</p></li><li><p>创建IDA数据库</p></li></ol><p>(1) 加载器模块：加载，解析文件头，创建程序块，确定入口点</p><p>(2) 反汇编引擎：一次传一个地址给处理器</p><p>(3) 处理器模块：确定指令类型、长度，继续执行位置，完成后二次遍历并转换成汇编显示</p><p>(4) 额外分析提取信息：编译器识别，函数参数和局部变量识别，数据类型信息</p><ol start="5"><li>关闭IDA数据库</li></ol><p>Collect garbage：删除数据库中没用的内存页面，若同时选中Deflate（压缩）会创建尽可能小的IDB文件</p><h3 id="三、-IDA桌面简介"><a href="#三、-IDA桌面简介" class="headerlink" title="三、 IDA桌面简介"></a>三、 IDA桌面简介</h3><p>工具栏区域、概况导航栏（导航带）、数据显示窗口标签、反汇编视图、图形视图、输出窗口、函数窗口</p><p><img src="/img/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/IDA%E6%A1%8C%E9%9D%A2.png" alt="IDA桌面"></p><h3 id="四、桌面行为、提示和技巧"><a href="#四、桌面行为、提示和技巧" class="headerlink" title="四、桌面行为、提示和技巧"></a>四、桌面行为、提示和技巧</h3><h4 id="1-提示"><a href="#1-提示" class="headerlink" title="1. 提示"></a>1. 提示</h4><p>(1) You may start to explore the input file right now.    可以开始浏览各种数据显示窗口</p><p>(2) The initial autoanalysis has been finished.    可以对数据库进行任意修改</p><h4 id="2-技巧"><a href="#2-技巧" class="headerlink" title="2. 技巧"></a>2. 技巧</h4><p>(1) <code>View → Open Subviews</code>恢复无意中关闭的数据显示窗口</p><p>(2) <code>Windows → Reset Desktop</code>将桌面恢复到原始布局</p><p>(3) <code>Windows → Save Subviews</code>保存有用的当前桌面布局，</p><p>​    <code>Windows → Load Desktop</code>打开之前保存的桌面布局</p><p>(4) <code>Options → Font</code>设置Disassembly窗口（唯一可修改显示字体的窗口）字体</p><h2 id="第5章-IDA数据显示窗口"><a href="#第5章-IDA数据显示窗口" class="headerlink" title="第5章 IDA数据显示窗口"></a>第5章 IDA数据显示窗口</h2><h3 id="一、IDA主要的数据显示窗口"><a href="#一、IDA主要的数据显示窗口" class="headerlink" title="一、IDA主要的数据显示窗口"></a>一、IDA主要的数据显示窗口</h3><h4 id="1-反汇编窗口"><a href="#1-反汇编窗口" class="headerlink" title="1. 反汇编窗口"></a>1. 反汇编窗口</h4><ul><li>Options → General 打开IDA Options复选框，是否选中Use graph view by default选项决定默认视图</li></ul><h5 id="1-图形视图"><a href="#1-图形视图" class="headerlink" title="(1) 图形视图"></a>(1) 图形视图</h5><p>① 流（箭头）</p><p>绿色——默认跳转    红色——不执行    蓝色——指向下一个即将执行的块（唯一）</p><p>② 块位置（详见P49，P50/第9章）</p><p>可平移定位，调整位置，分组和折叠，修改行前缀显示</p><h5 id="2-文本视图"><a href="#2-文本视图" class="headerlink" title="(2)文本视图"></a>(2)文本视图</h5><p><img src="/img/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/IDA%E6%96%87%E6%9C%AC%E8%A7%86%E5%9B%BE.png" alt="IDA文本视图"></p><h4 id="2-函数窗口"><a href="#2-函数窗口" class="headerlink" title="2. 函数窗口"></a>2. 函数窗口</h4><p><img src="/img/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E5%87%BD%E6%95%B0%E7%AA%97%E5%8F%A3.png"></p><h3 id="二、-次要显示窗口"><a href="#二、-次要显示窗口" class="headerlink" title="二、 次要显示窗口"></a>二、 次要显示窗口</h3><h4 id="1-十六进制窗口"><a href="#1-十六进制窗口" class="headerlink" title="1. 十六进制窗口"></a>1. 十六进制窗口</h4><p>右键菜单：</p><p><code>Edit</code>变为十六进制编辑器</p><p><code>Data Format</code>选择显示格式</p><p><code>Columns</code>更改显示的列数</p><p><code>Text</code>打开或关闭文本块</p><p><code>Synchronize with → IDA View-X</code>设置十六进制窗口与反汇编窗口同步</p><ul><li>显示问号表示无法识别给定的虚拟地址范围内的值——bss节（用于保存程序的所有未初始化的静态变量），不占用文件空间。但加载器分配初值为零的空间以便静态存储</li></ul><h4 id="2-导出窗口"><a href="#2-导出窗口" class="headerlink" title="2. 导出窗口"></a>2. 导出窗口</h4><p><img src="/img/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/Exports.png"></p><ul><li>start——程序入口点</li></ul><h4 id="3-导入窗口"><a href="#3-导入窗口" class="headerlink" title="3. 导入窗口"></a>3. 导入窗口</h4><p><img src="/img/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/Imports.png"></p><h4 id="4-结构体窗口"><a href="#4-结构体窗口" class="headerlink" title="4. 结构体窗口"></a>4. 结构体窗口</h4><p><img src="/img/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/Structures.png"></p><ul><li>蓝色为IDA判断的已知数据类型</li></ul><p>用途：为标准数据结构的布局提供现成参考，创建自定义数据结构</p><h3 id="三、其它显示窗口"><a href="#三、其它显示窗口" class="headerlink" title="三、其它显示窗口"></a>三、其它显示窗口</h3><h4 id="1-Strings窗口"><a href="#1-Strings窗口" class="headerlink" title="1. Strings窗口"></a>1. Strings窗口</h4><p>配置Setup Strings:</p><ul><li><font color='red'>Windows——Unicode字符串    Borland Delphi二进制文件——2个字节长的Pascal字符串</font></li></ul><p><img src="IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/setup.png"></p><p>① 仅显示已定义或用户已命名的字符串</p><p>② 扫描错误转换成指令的字符串或数据中非字符串格式（如字节数组或整数）的字符串，可能生成许多垃圾字符串（由5个或更多ASCII字符构成的），效果类似strings -a，但可确保无遗漏</p><h4 id="2-Names窗口"><a href="#2-Names窗口" class="headerlink" title="2. Names窗口"></a>2. Names窗口</h4><p><img src="/img/IDApro-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/Names.png"></p><p>编码方案：</p><p>F：常规函数</p><p>L：</p><p>————————————————————————————————未完待续————————————————————————————————</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDA</tag>
      
      <tag>二进制</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传</title>
    <link href="/2021/08/30/%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/08/30/%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>上传相关：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 步骤</span><br><span class="hljs-attribute">hexo</span> clean<span class="hljs-comment"># 清理缓存</span><br>hexo g<span class="hljs-comment"># 生成</span><br>hexo s<span class="hljs-comment"># 本地</span><br>hexo d<span class="hljs-comment"># 上传</span><br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 不明原因上传失败时</span><br>rm ~<span class="hljs-string">/.gitconfig</span><br>git config <span class="hljs-params">--global</span> user.email <span class="hljs-string">&quot;邮箱&quot;</span><br>git config <span class="hljs-params">--global</span> user.name <span class="hljs-string">&quot;用户名&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Front-matter：</strong></p><p>明明设置了自动生成的项目却从来只有title,data,tags。。。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">上传</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-08-30 22:17:18</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default2_2.png</span><br><span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">摘要</span><br><span class="hljs-attr">tags:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 可链接访问</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span>  <span class="hljs-comment"># 数值越大越靠前</span><br><span class="hljs-attr">comment:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>一些迷惑：</strong></p><p>弹出社会主义核心价值观的差别：示例单个：本地两个（修改后单个），网站重复且有些位置不能点击</p><p>运行时间的字体大小很迷，不知道在哪改（感觉跟正文一个大小）</p>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>玄学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid配置</title>
    <link href="/2021/08/30/fluid%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/08/30/fluid%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h2><h3 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h3><p>如果想设置单独的页面，可以直接在 markdown 里通过 style 标签实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">---<br>title: example<br>---<br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-comment">/* 设置整个页面的字体 */</span></span><br><span class="css">  <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-class">.markdown-body</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: KaiTi,<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>,Georgia, sans, serif;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-comment">/* 只设置 markdown 字体 */</span></span><br><span class="css">  <span class="hljs-selector-class">.markdown-body</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: KaiTi,<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>,Georgia, sans, serif;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="强制全局-HTTPS"><a href="#强制全局-HTTPS" class="headerlink" title="强制全局 HTTPS"></a>强制全局 HTTPS</h3><p>当你的域名升级到 HTTPS 后，可能之前存在部分图片等资源使用的是 HTTP，这时混用出现网页报错，造成图片无法显示。</p><p>控制台里也会出现报错：<code>Mixed Content: The page at &#39;https://xxx&#39; was loaded over HTTPS</code>。</p><p>这种情况可以在<strong>主题配置</strong>中开启此配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">force_https:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>即可将所有请求强制升级为 HTTPS（如是外部资源，需要本身支持 HTTPS）。</p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><h3 id="文章摘要："><a href="#文章摘要：" class="headerlink" title="文章摘要："></a>文章摘要：</h3><p>手动指定摘要，使用 <code>&lt;!-- more --&gt;</code> MD文档里划分，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正文的一部分作为摘要<br>&lt;!-- more --&gt;<br>余下的正文<br></code></pre></td></tr></table></figure><p>或者在 <code>Front-matter</code>里设置 <code>excerpt</code> 字段，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">文章摘要</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p><strong>Tip:</strong></p><p class="note note-primary">    优先级: 手动摘要 > 自动摘要    如果关闭自动摘要，并且没有设置手动摘要，摘要区域空白    无论哪种摘要都最多显示 3 行，当屏幕宽度不足时会隐藏部分摘要。</p><h3 id="隐藏文章："><a href="#隐藏文章：" class="headerlink" title="隐藏文章："></a>隐藏文章：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p><strong>Tip:</strong></p><p class="note note-primary">    隐藏会使文章在分类和标签类里都不显示    隐藏后依然可以通过文章链接访问</p><h3 id="文章排序："><a href="#文章排序：" class="headerlink" title="文章排序："></a>文章排序：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p><code>sticky</code> 数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序。</p><p>当文章设置了 <code>sticky</code> 后，主题会默认在首页文章标题前增加一个图标，来标识这是一个置顶文章</p><h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><h3 id="文章在首页的封面图"><a href="#文章在首页的封面图" class="headerlink" title="文章在首页的封面图"></a>文章在首页的封面图</h3><p>对于单篇文章，在文章开头 <code>Front-matter</code>中配置 <code>index_img</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p>和 Banner 配置相同，<code>/img/example.jpg</code> 对应的是存放在 <code>/source/img/example.jpg</code> 目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>也可以使用外链 Url 的绝对路径。</p><p>如果想统一给文章设置一个默认图片（文章不设置 <code>index_img</code> 则默认使用这张图片），可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/example.jpg</span><br></code></pre></td></tr></table></figure><p>当 <code>default_index_img</code> 和 <code>index_img</code> 都为空时，该文章在首页将不显示图片。</p><h3 id="文章页顶部大图"><a href="#文章页顶部大图" class="headerlink" title="文章页顶部大图"></a>文章页顶部大图</h3><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <code>Front-matter</code>中指定 <code>banner_img</code> 属性。</p><p>本地图片存放位置同上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h3 id="文章内容图片"><a href="#文章内容图片" class="headerlink" title="文章内容图片"></a>文章内容图片</h3><p>本地图片存放位置同上。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![](/img/example.jpg)<br></code></pre></td></tr></table></figure><p><img src="/img/fluid%E9%85%8D%E7%BD%AE/photo.png" alt="两种链接方式"></p><h3 id="脚注："><a href="#脚注：" class="headerlink" title="脚注："></a>脚注：</h3><p>脚注语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一句话[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span><br></code></pre></td></tr></table></figure><p>更优雅的使用方式，是将脚注写在文末，比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正文<br><br><span class="hljs-section">## 参考</span><br><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br><br></code></pre></td></tr></table></figure><p>当然你也可以通过修改上方配置项 <code>header</code> 来自动加入节标题，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&lt;h2&gt;参考&lt;/h2&gt;&#x27;</span>  <span class="hljs-comment"># 等同于手动写 `## 参考`</span><br></code></pre></td></tr></table></figure><h3 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h3><h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h4><p>在 markdown 中加入如下的代码来使用便签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选便签：</p><p>primary——紫    secondary——灰    success——绿    danger——红</p><p>warning——黄    info——蓝    light——黑</p><p><strong>Tip:</strong></p><p>使用时 <code>&#123;% note primary %&#125;` 和 `&#123;% endnote %&#125;</code> 需单独一行，否则会出现问题</p><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h4><p>在 markdown 中加入如下的代码来使用 Label：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选 Label：</p><p>primary——浅紫    default——浅灰    info——浅蓝    success——浅绿    warning——浅黄    danger——浅红</p><p><strong>Tip:</strong></p><p>若使用 <code>&#123;% label primary @text %&#125;</code>，text 不能以 @ 开头</p><h4 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h4><p>在 markdown 中加入如下的代码来使用 Checkbox：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></td></tr></table></figure><p>text：显示的文字<br>checked：默认是否已勾选，默认 false<br>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</p><p>示例：</p><div>            <input type="checkbox" disabled >普通示例          </div><div>            <input type="checkbox" disabled checked="checked">默认选中          </div>            <input type="checkbox" disabled >内联示例           后面文字不换行<input type="checkbox" disabled > 也可以只传入一个参数，文字写在后边（这样不支持外联）<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url：跳转链接<br>text：显示的文字<br>title：鼠标悬停时显示的文字（可选）</p><a class="btn" href="javascript:;"  title="title" target="_blank">text</a><h4 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h4><p>如果想把多张图片按一定布局组合显示，你可以在 markdown 中按如下格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>&#123;% endgi %&#125;<br></code></pre></td></tr></table></figure><p>total：图片总数量，对应中间包含的图片 url 数量<br> n1-n2-…：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</p><p>如下图为 <code>&#123;% gi 5 3-2 %&#125;</code> 示例，代表共 5 张图，第一行 3 张图，第二行 2 张图。（两张示例图对应本地和网页图片两种格式）</p><p><img src="/img/fluid%E9%85%8D%E7%BD%AE/example.png" alt="example"></p><p><img src="https://cdn.jsdelivr.net/gh/k1tcheung/PicGO/img/202108301337558.png" alt="example"></p><h2 id="分类和标签页"><a href="#分类和标签页" class="headerlink" title="分类和标签页"></a>分类和标签页</h2><p>标签是以词云的形式展示，标签的大小和颜色会根据标签下的文章数量变化。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">  -</span> Diary<br><span class="hljs-bullet">  -</span> Life<br></code></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">categories:<br><span class="hljs-bullet">- </span>[Diary, PlayStation]<br><span class="hljs-bullet">- </span>[Diary, Games]<br><span class="hljs-bullet">- </span>[Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><p><strong>两个好看的主题：</strong></p><p><a href="https://zhwangart.com/2018/11/30/Ocean/">Ocean<a/></p><p><a href="https://github.com/jerryc127/hexo-theme-butterfly/blob/dev/README_CN.md">butterfly<a/></p><p><strong>参考文档点击底部<code>Hexo</code>或<code>Fluid</code></strong></p>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/30/hello-world/"/>
    <url>/2021/08/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! </p><span id="more"></span><p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
